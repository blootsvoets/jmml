//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.08.11 at 05:21:44 PM CEST 
//


package eu.mapperproject.jmml.specification;

import eu.mapperproject.jmml.specification.graph.Child;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;


/**
 * 
 * 	    A domain and all its super-domains, separated by periods like
 *	      `domain.subdomain.subsubdomain'.
 * 	  
 * 
 * <p>Java class for domain simple type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;simpleType name="domain">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;pattern value="(\p{Pc}|\p{Pd}|\p{L}|\p{N})+(\.(\p{Pc}|\p{Pd}|\p{L}|\p{N})+)*"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "domain", propOrder = {
    "name"
})
public class Domain implements Child<Domain>{
	@XmlValue
	private String name;
	private transient Domain parent;
	
	public Domain() {
		this.name = null;
		this.parent = null;
	}
	
	private Domain(String[] names, int level) {
		this.name = names[level];
		this.parent = getDomain(names, level - 1);
	}
	
	
    /**
     * 
     * 	    A domain and all its super-domains, separated by periods like
	 *	       `domain.subdomain.subsubdomain'.
     * 	  
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
	
    public String getName() {
		if (this.isRoot()) {
			return this.name;
		}
		else {
			return this.parent.getName() + '.' + this.name;
		}
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
		String[] names = value.split("\\.");
		
		if (!this.matches(names, names.length - 1)) {
			this.name = names[names.length - 1];
			this.parent = getDomain(names, names.length - 2);
			addDomain(this, names.length - 1);
		}
    }
	
	/**
	 * Wheter a array of strings matches the current domain on the specified
	 * level.
	 * @param names
	 * @param level
	 * @return 
	 */
	private boolean matches(String[] names, int level) {
		if (level == 0) {
			return names[0].equals(this.name);
		}
		else {
			return names[level].equals(this.name)
				&& this.parent != null
				&& this.parent.matches(names, level - 1);
		}
	}
	
	@Override
	public Domain parent() {
		return this.parent;
	}

	@Override
	public boolean isRoot() {
		return this.parent == null;
	}

	
	private final static List<List<Domain>> DOMAINS;
	static {
		DOMAINS = new ArrayList<List<Domain>>();
	}

	public static Domain getDomain(String[] names, int level) {
		if (level < 0) {
			return null;
		}
		
		if (DOMAINS.size() > level) {
			for (Domain domain : DOMAINS.get(level)) {
				if (domain.matches(names, level)) {
					return domain;
				}
			}
		}
		
		Domain domain = new Domain(names, level);
		addDomain(domain, level);
		return domain;
	}
	
	private static void addDomain(Domain domain, int level) {
		while (DOMAINS.size() <= level) {
			DOMAINS.add(new ArrayList<Domain>());
		}
		DOMAINS.get(level).add(domain);
	}
}
