group muscle_cxa;
delimiters "%", "%"

cxa(inst,nativeinst,mpiinst,pythoninst,matlabinst,term,params,classpath,libpath,connection,max_timesteps) ::= <<# Set class and library paths
%if(classpath)%add_classpath "%classpath%"%endif%
%if(libpath)%add_libpath "%libpath%"%endif%

# total simulation time
$env["max_timesteps"] = "%max_timesteps%"

# declare kernels
%inst:kernel()%
%nativeinst:nativekernel()%
%mpiinst:mpikernel()%
%pythoninst:pykernel()%
%matlabinst:matkernel()%
%term:terminal()%
# parameters
%params:param()%
# configure coupling
%connection:attach()%
>>

attach(connection) ::= <<
%connection.from%.couple(%connection.to%, %if(connection.equalPort)%'%connection.equalPort%'%elseif(connection.filters)%{'%connection.coupling.from.port.id%' => '%connection.coupling.to.port.id%'}%else%'%connection.coupling.from.port.id%' => '%connection.coupling.to.port.id%'%endif%%if(connection.filters)%, [%connection.filters:filter(); separator=", "%]%endif%)

>>

ports(coupling) ::= <<'%coupling.from.port.id%' => '%coupling.to.port.id%', >>
filter(f) ::= <<'%f%'>>

terminal(terminal) ::= <<
%terminal.id% = Terminal.new('%terminal.id%'%if(terminal.clazz)%, '%terminal.clazz%'%endif%)

>>

kernel(kernel) ::= <<
%kernel.id% = Instance.new('%kernel.id%'%if(kernel.clazz)%, '%kernel.clazz%'%endif%)

>>

pykernel(kernel) ::= <<
%kernel.inst.id% = PythonInstance.new('%kernel.inst.id%', '%kernel.script%')

>>

mpikernel(kernel) ::= <<
%kernel.inst.id% = MPIInstance.new('%kernel.inst.id%', '%kernel.executable%')

>>

matkernel(kernel) ::= <<
%kernel.inst.id% = MatlabInstance.new('%kernel.inst.id%', '%kernel.script%')

>>

nativekernel(kernel) ::= <<
%kernel.inst.id% = NativeInstance.new('%kernel.inst.id%', '%kernel.executable%')

>>

param(params) ::= <<
%params.instid%['%params.param.id%']=%if(!params.param.numeric)%"%endif%%params.param.value%%if(!params.param.numeric)%"%endif%

>>